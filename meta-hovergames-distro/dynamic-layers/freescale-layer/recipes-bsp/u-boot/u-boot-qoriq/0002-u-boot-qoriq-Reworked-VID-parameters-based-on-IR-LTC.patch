From e7bb5f916eab41b4bcf00c78e822b94b6b79d38c Mon Sep 17 00:00:00 2001
From: nxa15299 <Heinz.Wrobel@nxp.com>
Date: Mon, 12 Feb 2018 08:26:39 +0100
Subject: [PATCH 2/2] u-boot-qoriq: Reworked VID parameters based on IR/LTC
 datasheets

The parameter sets were a bit warped. For IR, the read accuracy was
incorrect. For the LTC the step width was too wide.
Now the parameters are applied in a more generic fashion, so
that the code is more generic and can be more easily adapted
to future regulator chips

Signed-off-by: nxa15299 <Heinz.Wrobel@nxp.com>
---
 board/freescale/common/vid.c | 37 ++++++++++++++++++++-----------------
 board/freescale/common/vid.h | 15 +++++++++++----
 2 files changed, 31 insertions(+), 21 deletions(-)

diff --git a/board/freescale/common/vid.c b/board/freescale/common/vid.c
index d66957ad6f..e9ddc43faf 100644
--- a/board/freescale/common/vid.c
+++ b/board/freescale/common/vid.c
@@ -96,30 +96,33 @@ static int find_vid_chip_on_i2c(void)
 }
 
 /* Maximum loop count waiting for new voltage to take effect */
-#define MAX_LOOP_WAIT_NEW_VOL		100
+#define MAX_LOOP_WAIT_NEW_VOL		100 /* ms due to udelay(1000) */
 /* Maximum loop count waiting for the voltage to be stable */
-#define MAX_LOOP_WAIT_VOL_STABLE	100
+#define MAX_LOOP_WAIT_VOL_STABLE	100 /* ms due to udelay(1000) */
 /*
- * read_voltage from sensor on I2C bus
- * We use average of 4 readings, waiting for WAIT_FOR_ADC before
- * another reading
- */
-#define NUM_READINGS    4       /* prefer to be power of 2 for efficiency */
-
-/* If an INA220 chip is available, we can use it to read back the voltage
+ * If an INA220 chip is available, we can use it to read back the voltage
  * as it may have a higher accuracy than the IR chip for the same purpose
  */
 #ifdef CONFIG_VOL_MONITOR_INA220
+#define NUM_READINGS    4       /* prefer to be power of 2 for efficiency */
 #define WAIT_FOR_ADC	532	/* wait for 532 microseconds for ADC */
-#define ADC_MIN_ACCURACY	4
+#define ADC_MIN_ACCURACY	4 /* mV */
 #endif
 #ifdef CONFIG_VOL_MONITOR_IR36021_READ
+#define NUM_READINGS    4       /* prefer to be power of 2 for efficiency */
 #define WAIT_FOR_ADC	138	/* wait for 138 microseconds for ADC */
-#define ADC_MIN_ACCURACY	4
+#define ADC_MIN_ACCURACY	IR_ADC_MIN_ACCURACY
+#define VDD_STEP_UP		IR_VDD_STEP_UP
+#define VDD_STEP_DOWN		IR_VDD_STEP_DOWN
 #endif
 #ifdef CONFIG_VOL_MONITOR_LTC3882_READ
 #define WAIT_FOR_ADC		0
-#define ADC_MIN_ACCURACY	4
+#define ADC_MIN_ACCURACY	LTC_ADC_MIN_ACCURACY
+#define VDD_STEP_UP		LTC_VDD_STEP_UP
+#define VDD_STEP_DOWN		LTC_VDD_STEP_DOWN
+#endif
+#if VDD_STEP_UP < 1 || VDD_STEP_DOWN < 1
+#error VDD_STEP values must be > 0!
 #endif
 
 #ifdef CONFIG_VOL_MONITOR_INA220
@@ -268,7 +271,7 @@ static int wait_for_new_voltage(int vdd, int i2caddress)
 	 * point to a serious failure in the regulator system.
 	 */
 	for (timeout = 0;
-	     abs(vdd - vdd_current) > (IR_VDD_STEP_UP + IR_VDD_STEP_DOWN) &&
+	     abs(vdd - vdd_current) > ADC_MIN_ACCURACY &&
 	     timeout < MAX_LOOP_WAIT_NEW_VOL; timeout++) {
 		udelay(1000);
 		vdd_current = read_voltage(i2caddress);
@@ -681,13 +684,13 @@ int adjust_vdd(ulong vdd_override)
 	while (vdd_last > 0 &&
 	       vdd_last < vdd_target &&
 	       vdd_current < vdd_target) {
-		vdd_current += IR_VDD_STEP_UP;
+		vdd_current += min(VDD_STEP_UP, vdd_target - vdd_current + ADC_MIN_ACCURACY);
 		vdd_last = set_voltage(i2caddress, vdd_current);
 	}
 	while (vdd_last > 0 &&
-	       vdd_last > vdd_target + (IR_VDD_STEP_DOWN - 1) &&
-	       vdd_current > vdd_target + (IR_VDD_STEP_DOWN - 1)) {
-		vdd_current -= IR_VDD_STEP_DOWN;
+	       vdd_last >= vdd_target + ADC_MIN_ACCURACY &&
+	       vdd_current >= vdd_target + ADC_MIN_ACCURACY) {
+		vdd_current -= min(VDD_STEP_DOWN, vdd_current - vdd_target);
 		vdd_last = set_voltage(i2caddress, vdd_current);
 	}
 
diff --git a/board/freescale/common/vid.h b/board/freescale/common/vid.h
index 7fc20901ff..450c331206 100644
--- a/board/freescale/common/vid.h
+++ b/board/freescale/common/vid.h
@@ -17,6 +17,12 @@
 #define IR36021_INTEL_MODE		0x00
 #define IR36021_AMD_MODE		0x20
 
+/* step the IR regulator in 5mV increments */
+#define IR_VDD_STEP_DOWN		5 /* mV */
+#define IR_VDD_STEP_UP			5 /* mV */
+#define IR_ADC_MIN_ACCURACY		8 /* mV */
+
+
 /* Declarations for the LTC3882 */
 #define LTC3882_PAGE			0x00
 #define LTC3882_PAGE_PLUS_WRITE		0x05
@@ -33,15 +39,16 @@
 #define LTC3882_MFR_ID			0x99
 #define LTC3882_MFR_MODEL		0x9A
 
+/* step the LTC regulator in 1mV increments */
+#define LTC_VDD_STEP_DOWN		1 /* mV */
+#define LTC_VDD_STEP_UP			1 /* mV */
+#define LTC_ADC_MIN_ACCURACY		1 /* mV */
+
 /* This is a compatibility setting for existing board configs */
 #ifdef PWM_CHANNEL0
 #define LTC3882_VID_CHANNEL	PWM_CHANNEL0
 #endif
 
-/* step the IR regulator in 5mV increments */
-#define IR_VDD_STEP_DOWN		5
-#define IR_VDD_STEP_UP			5
-
 int vid_set_mv_limits(int absmax,
                       int marginhigh, int marginlow,
                       int ovfault, int ovwarn,
-- 
2.15.1

