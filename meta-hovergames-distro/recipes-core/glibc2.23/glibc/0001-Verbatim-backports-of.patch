From 95b83d31bba61345c8dcd9cec951c1fe9ffbb1b7 Mon Sep 17 00:00:00 2001
From: Heinz Wrobel <Heinz.Wrobel@nxp.com>
Date: Wed, 5 Feb 2020 10:50:54 +0100
Subject: [PATCH] Verbatim backports of:

+commit e9177fba13549a8e2a6232f46080e5c6d3e467b1
+Author: Szabolcs Nagy <szabolcs.nagy@arm.com>
+Date:   Wed Jun 21 13:47:07 2017 +0100
+
+    [AArch64] Use hidden __GI__dl_argv in rtld startup code
+
+    We rely on the symbol being locally defined so using extern symbol
+    is not correct and the linker may complain about the relocations.

+2017-07-12  Jiong Wang  <jiong.wang@arm.com>
+
+        * sysdeps/arm/dl-machine.h (elf_machine_load_address):  Also strip bit 0
+        of pcrel_address under Thumb mode.

This is need to compile with recent binutils

Signed-off-by: Heinz Wrobel <Heinz.Wrobel@nxp.com>

---
 sysdeps/aarch64/dl-machine.h |  4 ++--
 sysdeps/arm/dl-machine.h     | 12 ++++++++++--
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h
index 882505fcfc..6407246a99 100644
--- a/sysdeps/aarch64/dl-machine.h
+++ b/sysdeps/aarch64/dl-machine.h
@@ -157,8 +157,8 @@ _dl_start_user:							\n\
 	cmp	x0, #0						\n\
 	bne	1b						\n\
 	// Update _dl_argv					\n\
-	adrp	x3, _dl_argv					\n\
-	str	x2, [x3, #:lo12:_dl_argv]			\n\
+	adrp	x3, __GI__dl_argv					\n\
+	str	x2, [x3, #:lo12:__GI__dl_argv]			\n\
 .L_done_stack_adjust:						\n\
 	// compute envp						\n\
 	add	x3, x2, x1, lsl #3				\n\
diff --git a/sysdeps/arm/dl-machine.h b/sysdeps/arm/dl-machine.h
index 31de63b4f3..aeb9caf930 100644
--- a/sysdeps/arm/dl-machine.h
+++ b/sysdeps/arm/dl-machine.h
@@ -56,11 +56,19 @@ elf_machine_load_address (void)
   extern Elf32_Addr internal_function __dl_start (void *) asm ("_dl_start");
   Elf32_Addr got_addr = (Elf32_Addr) &__dl_start;
   Elf32_Addr pcrel_addr;
+  asm ("adr %0, _dl_start" : "=r" (pcrel_addr));
 #ifdef __thumb__
-  /* Clear the low bit of the funciton address.  */
+  /* Clear the low bit of the funciton address.
+
+     NOTE: got_addr is from GOT table whose lsb is always set by linker if it's
+     Thumb function address.  PCREL_ADDR comes from PC-relative calculation
+     which will finish during assembling.  GAS assembler before the fix for
+     PR gas/21458 was not setting the lsb but does after that.  Always do the
+     strip for both, so the code works with various combinations of glibc and
+     Binutils.  */
   got_addr &= ~(Elf32_Addr) 1;
+  pcrel_addr &= ~(Elf32_Addr) 1;
 #endif
-  asm ("adr %0, _dl_start" : "=r" (pcrel_addr));
   return pcrel_addr - got_addr;
 }
 
